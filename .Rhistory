mu.PIlo=apply(link2,2,PI)[1,],
mu.PIhi=apply(link2,2,PI)[2,],
mu.mean = apply(link2, 2, mean)
)
ensemble.preds <- cbind(
rugged = d$rugged,
mu = apply(rugged.ensemble$link, 2, mean),
mu.lo = apply(rugged.ensemble$link, 2, PI)[1,],
mu.hi = apply(rugged.ensemble$link, 2, PI)[2,]
) %>%
unique()
ggplot(data = data.frame(m7.3.2.preds)) +
geom_point(data = rugged_w_sey, aes(x = rugged, y = log_gdp), alpha = 0.6) +
geom_line(aes(x = rugged, y = mu.mean), linetype = "m2") +
geom_ribbon(data = data.frame(m4.preds), aes(x = age, ymin = mu.PIlo, ymax = mu.PIhi), alpha = 0.2) +
geom_line(data = data.frame(ensemble.preds), aes(x = rugged, y = mu), linetype = "ensemble") +
geom_ribbon(data = data.frame(ensemble.preds), aes(x = rugged, ymin = mu.lo, ymax = mu.hi), alpha = 0.2) +
scale_linetype_discrete("Model", labels = c("Model from (b)", "Ensemble")) +
labs(y = "height", x = "age")
# plot the model-averaged predictions
m7.3.2.preds <- cbind(
rugged = d$rugged,
mu.PIlo=apply(link2,2,PI)[1,],
mu.PIhi=apply(link2,2,PI)[2,],
mu.mean = apply(link2, 2, mean)
)
ensemble.preds <- cbind(
rugged = d$rugged,
mu = apply(rugged.ensemble$link, 2, mean),
mu.lo = apply(rugged.ensemble$link, 2, PI)[1,],
mu.hi = apply(rugged.ensemble$link, 2, PI)[2,]
) %>%
unique()
ggplot(data = data.frame(m7.3.2.preds)) +
geom_point(data = rugged_w_sey, aes(x = rugged, y = log_gdp), alpha = 0.6) +
geom_line(aes(x = rugged, y = mu.mean), linetype = "m2") +
geom_ribbon(data = data.frame(m4.preds), aes(x = age, ymin = mu.PIlo, ymax = mu.PIhi), alpha = 0.2) +
geom_line(data = data.frame(ensemble.preds), aes(x = rugged, y = mu), linetype = "ensemble") +
geom_ribbon(data = data.frame(ensemble.preds), aes(x = rugged, ymin = mu.lo, ymax = mu.hi), alpha = 0.2) +
# scale_linetype_discrete("Model", labels = c("Model from (b)", "Ensemble")) +
labs(y = "height", x = "age")
# plot the model-averaged predictions
m7.3.2.preds <- cbind(
rugged = d$rugged,
mu.PIlo=apply(link2,2,PI)[1,],
mu.PIhi=apply(link2,2,PI)[2,],
mu.mean = apply(link2, 2, mean)
)
ensemble.preds <- cbind(
rugged = d$rugged,
mu = apply(rugged.ensemble$link, 2, mean),
mu.lo = apply(rugged.ensemble$link, 2, PI)[1,],
mu.hi = apply(rugged.ensemble$link, 2, PI)[2,]
) %>%
unique()
ggplot(data = data.frame(m7.3.2.preds)) +
geom_point(data = rugged_w_sey, aes(x = rugged, y = log_gdp), alpha = 0.6) +
geom_line(aes(x = rugged, y = mu.mean), linetype = "m2") +
geom_ribbon(data = data.frame(m4.preds), aes(x = age, ymin = mu.PIlo, ymax = mu.PIhi), alpha = 0.2) +
geom_line(data = data.frame(ensemble.preds), aes(x = rugged, y = mu), linetype = "ensemble") +
geom_ribbon(data = data.frame(ensemble.preds), aes(x = rugged, ymin = mu.lo, ymax = mu.hi), alpha = 0.2) +
# scale_linetype_discrete("Model", labels = c("Model from (b)", "Ensemble")) +
# labs(y = "height", x = "age")
# plot the model-averaged predictions
m7.3.2.preds <- cbind(
rugged = d$rugged,
mu.PIlo=apply(link2,2,PI)[1,],
mu.PIhi=apply(link2,2,PI)[2,],
mu.mean = apply(link2, 2, mean)
)
ensemble.preds <- cbind(
rugged = d$rugged,
mu = apply(rugged.ensemble$link, 2, mean),
mu.lo = apply(rugged.ensemble$link, 2, PI)[1,],
mu.hi = apply(rugged.ensemble$link, 2, PI)[2,]
) %>%
unique()
ggplot(data = data.frame(m7.3.2.preds)) +
geom_point(data = rugged_w_sey, aes(x = rugged, y = log_gdp), alpha = 0.6) +
geom_line(aes(x = rugged, y = mu.mean), linetype = "m2") +
geom_ribbon(data = data.frame(m4.preds), aes(x = age, ymin = mu.PIlo, ymax = mu.PIhi), alpha = 0.2) +
geom_line(data = data.frame(ensemble.preds), aes(x = rugged, y = mu), linetype = "ensemble") +
geom_ribbon(data = data.frame(ensemble.preds), aes(x = rugged, ymin = mu.lo, ymax = mu.hi), alpha = 0.2)
# scale_linetype_discrete("Model", labels = c("Model from (b)", "Ensemble")) +
# labs(y = "height", x = "age")
d <- Howell1
d$age <- (d$age - mean(d$age))/sd(d$age)
set.seed( 1000 )
i <- sample(1:nrow(d),size=nrow(d)/2)
d1 <- d[ i , ]
d2 <- d[ -i , ]
m1 <- map(alist(
height ~ dnorm(mu, sigma),
mu <- a + b * age,
a ~ dnorm(0, 100),
b ~ dnorm(0, 100),
sigma ~ dunif(0, 50)
),
start = list(a = 0, b = 0, sigma = sd(d1$age)),
data = d1)
m2 <- map(alist(
height ~ dnorm(mu, sigma),
mu <- a + b1 * age + b2*I(age^2),
a ~ dnorm(0, 100),
b1 ~ dnorm(0, 100),
b2 ~ dnorm(0, 100),
sigma ~ dunif(0, 50)
),
start = list(a = 0, b1= 0, b2 = 0, sigma = sd(d1$age)),
data = d1)
m3 <- map(alist(
height ~ dnorm(mu, sigma),
mu <- a + b1 * age + b2*I(age^2) + b3*I(age^3),
a ~ dnorm(0, 100),
b1 ~ dnorm(0, 100),
b2 ~ dnorm(0, 100),
b3 ~ dnorm(0, 100),
sigma ~ dunif(0, 50)
),
start = list(a = 0, b1 = 0, b2 = 0, b3 = 0, sigma = sd(d1$age)),
data = d1)
m4 <- map(alist(
height ~ dnorm(mu, sigma),
mu <- a + b1 * age + b2*I(age^2) + b3*I(age^3) + b4*I(age^4),
a ~ dnorm(0, 100),
b1 ~ dnorm(0, 100),
b2 ~ dnorm(0, 100),
b3 ~ dnorm(0, 100),
b4 ~ dnorm(0, 100),
sigma ~ dunif(0, 50)
),
start = list(a = 0, b1 = 0, b2 = 0, b3 = 0, b4 = 0, sigma = sd(d1$age)),
data = d1)
m5 <- map(alist(
height ~ dnorm(mu, sigma),
mu <- a + b1 * age + b2*I(age^2) + b3*I(age^3) + b4*I(age^4) + b5*I(age^5),
a ~ dnorm(0, 100),
b1 ~ dnorm(0, 100),
b2 ~ dnorm(0, 100),
b3 ~ dnorm(0, 100),
b4 ~ dnorm(0, 100),
b5 ~ dnorm(0, 100),
sigma ~ dunif(0, 50)
),
start = list(a = 0, b1 = 0, b2 = 0, b3 = 0, b4 = 0, b5 = 0, sigma = sd(d1$age)),
data = d1)
m6 <- map(alist(
height ~ dnorm(mu, sigma),
mu <- a + b1 * age + b2*I(age^2) + b3*I(age^3) + b4*I(age^4) + b5*I(age^5) +b6*I(age^6),
a ~ dnorm(0, 100),
b1 ~ dnorm(0, 100),
b2 ~ dnorm(0, 100),
b3 ~ dnorm(0, 100),
b4 ~ dnorm(0, 100),
b5 ~ dnorm(0, 100),
b6 ~ dnorm(0, 100),
sigma ~ dunif(0, 50)
),
start = list(a = 0, b1 = 0, b2 = 0, b3 = 0, b4 = 0, b5 = 0, b6 = 0, sigma = sd(d1$age)),
data = d1)
## plot of average mean and 97% confidence interval for each model
age_seq <- data.frame(age = d$age)
# function that plots the average mean predictions of each model
plot_age <- function(model, name) {
mu_age <- link(model, refresh = 0, data = age_seq)
mu_age_bands <- cbind(age = age_seq,
mu.mean = apply(mu_age, 2, mean),
mu.PIlo=apply(mu_age,2,HPDI, prob = 0.97)[1,],
mu.PIhi=apply(mu_age,2,HPDI, prob = 0.97)[2,])
g <- ggplot(data = data.frame(mu_age_bands)) +
geom_line(aes(x = age, y = mu.mean), color = 'blue') +
geom_ribbon(aes(x = age, ymin = mu.PIlo, ymax = mu.PIhi), alpha = .3) +
geom_point(data = d, aes(x = age, y = height), alpha = .5) +
labs(x = 'Adjusted age', y = 'Height', title = 'Implied prediction plot for Model', name)
return(g)
}
# model 1
g1 <- plot_age(m1, 1)
# model 2
g2 <- plot_age(m2, 2)
# model 3
g3 <- plot_age(m3, 3)
# model 4
g4 <- plot_age(m4, 4)
# model 5
g5 <- plot_age(m5, 5)
# model 6
g6 <- plot_age(m6, 6)
grid.arrange(g1, g2, g3, g4, g5, g6)
## model averaged predictions
howell_ensemble <- ensemble(m1, m2, m3, m4, m5, m6, refresh = 0)
# find the model with lowest WAIC
compare(m1, m2, m3, m4, m5, m6)
# compare the predictions by 2 models
m4.mu <- link(m4, refresh = 0, data = d) # use the raw data for the prediction of m4
m4.preds <- cbind(
age = d$age,
mu = apply(m4.mu, 2, mean),
mu.lo = apply(m4.mu, 2, PI)[1,],
mu.hi = apply(m4.mu, 2, PI)[2,]
) %>%
unique()
ensemble.preds <- cbind(
age = d$age,
mu = apply(howell_ensemble$link, 2, mean),
mu.lo = apply(howell_ensemble$link, 2, PI)[1,],
mu.hi = apply(howell_ensemble$link, 2, PI)[2,]
) %>%
unique()
ggplot(data = data.frame(m4.preds)) +
geom_point(data = d, aes(x = age, y = height), alpha = 0.6) +
geom_line(aes(x = age, y = mu, linetype = "m4")) +
geom_ribbon(data = data.frame(m4.preds), aes(x = age, ymin = mu.lo, ymax = mu.hi), alpha = 0.2) +
geom_line(data = data.frame(ensemble.preds), aes(x = age, y = mu, linetype = "ensemble")) +
geom_ribbon(data = data.frame(ensemble.preds), aes(x = age, ymin = mu.lo, ymax = mu.hi), alpha = 0.2) +
scale_linetype_discrete("Model", labels = c("M4", "Ensemble")) +
labs(y = "height", x = "age")
ggplot(data = data.frame(m4.preds)) +
geom_point(data = d, aes(x = age, y = height), alpha = 0.6) +
geom_line(aes(x = age, y = mu, linetype = "m4")) +
geom_line(aes(x = age, y = mu.lo, linetype = "m4")) +
geom_line(aes(x = age, y = mu.hi, linetype = "m4")) +
geom_line(data = data.frame(ensemble.preds), aes(x = age, y = mu, linetype = "ensemble")) +
geom_ribbon(data = data.frame(ensemble.preds), aes(x = age, ymin = mu.lo, ymax = mu.hi), alpha = 0.2) +
scale_linetype_discrete("Model", labels = c("M4", "Ensemble")) +
labs(y = "height", x = "age")
## model averaged predictions
howell_ensemble <- ensemble(m1, m2, m3, m4, m5, m6, refresh = 0)
ggplot(data = data.frame(m4.preds)) +
geom_point(data = d, aes(x = age, y = height), alpha = 0.6) +
geom_line(aes(x = age, y = mu, linetype = "m4")) +
geom_line(aes(x = age, y = mu.lo, linetype = "m4")) +
geom_line(aes(x = age, y = mu.hi, linetype = "m4")) +
geom_line(data = data.frame(ensemble.preds), aes(x = age, y = mu, linetype = "ensemble")) +
geom_ribbon(data = data.frame(ensemble.preds), aes(x = age, ymin = mu.lo, ymax = mu.hi), alpha = 0.2) +
# scale_linetype_discrete("Model", labels = c("M4", "Ensemble")) +
labs(y = "height", x = "age")
library(rethinking)
library(stargazer)
library(dplyr)
library(gridExtra)
data(Howell1)
set.seed(23)
d <- Howell1
d$age <- (d$age - mean(d$age))/sd(d$age)
set.seed( 1000 )
i <- sample(1:nrow(d),size=nrow(d)/2)
d1 <- d[ i , ]
d2 <- d[ -i , ]
m1 <- map(alist(
height ~ dnorm(mu, sigma),
mu <- a + b * age,
a ~ dnorm(0, 100),
b ~ dnorm(0, 100),
sigma ~ dunif(0, 50)
),
start = list(a = 0, b = 0, sigma = sd(d1$age)),
data = d1)
m2 <- map(alist(
height ~ dnorm(mu, sigma),
mu <- a + b1 * age + b2*I(age^2),
a ~ dnorm(0, 100),
b1 ~ dnorm(0, 100),
b2 ~ dnorm(0, 100),
sigma ~ dunif(0, 50)
),
start = list(a = 0, b1= 0, b2 = 0, sigma = sd(d1$age)),
data = d1)
m3 <- map(alist(
height ~ dnorm(mu, sigma),
mu <- a + b1 * age + b2*I(age^2) + b3*I(age^3),
a ~ dnorm(0, 100),
b1 ~ dnorm(0, 100),
b2 ~ dnorm(0, 100),
b3 ~ dnorm(0, 100),
sigma ~ dunif(0, 50)
),
start = list(a = 0, b1 = 0, b2 = 0, b3 = 0, sigma = sd(d1$age)),
data = d1)
m4 <- map(alist(
height ~ dnorm(mu, sigma),
mu <- a + b1 * age + b2*I(age^2) + b3*I(age^3) + b4*I(age^4),
a ~ dnorm(0, 100),
b1 ~ dnorm(0, 100),
b2 ~ dnorm(0, 100),
b3 ~ dnorm(0, 100),
b4 ~ dnorm(0, 100),
sigma ~ dunif(0, 50)
),
start = list(a = 0, b1 = 0, b2 = 0, b3 = 0, b4 = 0, sigma = sd(d1$age)),
data = d1)
m5 <- map(alist(
height ~ dnorm(mu, sigma),
mu <- a + b1 * age + b2*I(age^2) + b3*I(age^3) + b4*I(age^4) + b5*I(age^5),
a ~ dnorm(0, 100),
b1 ~ dnorm(0, 100),
b2 ~ dnorm(0, 100),
b3 ~ dnorm(0, 100),
b4 ~ dnorm(0, 100),
b5 ~ dnorm(0, 100),
sigma ~ dunif(0, 50)
),
start = list(a = 0, b1 = 0, b2 = 0, b3 = 0, b4 = 0, b5 = 0, sigma = sd(d1$age)),
data = d1)
m6 <- map(alist(
height ~ dnorm(mu, sigma),
mu <- a + b1 * age + b2*I(age^2) + b3*I(age^3) + b4*I(age^4) + b5*I(age^5) +b6*I(age^6),
a ~ dnorm(0, 100),
b1 ~ dnorm(0, 100),
b2 ~ dnorm(0, 100),
b3 ~ dnorm(0, 100),
b4 ~ dnorm(0, 100),
b5 ~ dnorm(0, 100),
b6 ~ dnorm(0, 100),
sigma ~ dunif(0, 50)
),
start = list(a = 0, b1 = 0, b2 = 0, b3 = 0, b4 = 0, b5 = 0, b6 = 0, sigma = sd(d1$age)),
data = d1)
## plot of average mean and 97% confidence interval for each model
age_seq <- data.frame(age = d$age)
# function that plots the average mean predictions of each model
plot_age <- function(model, name) {
mu_age <- link(model, refresh = 0, data = age_seq)
mu_age_bands <- cbind(age = age_seq,
mu.mean = apply(mu_age, 2, mean),
mu.PIlo=apply(mu_age,2,HPDI, prob = 0.97)[1,],
mu.PIhi=apply(mu_age,2,HPDI, prob = 0.97)[2,])
g <- ggplot(data = data.frame(mu_age_bands)) +
geom_line(aes(x = age, y = mu.mean), color = 'blue') +
geom_ribbon(aes(x = age, ymin = mu.PIlo, ymax = mu.PIhi), alpha = .3) +
geom_point(data = d, aes(x = age, y = height), alpha = .5) +
labs(x = 'Adjusted age', y = 'Height', title = 'Implied prediction plot for Model', name)
return(g)
}
# model 1
g1 <- plot_age(m1, 1)
# model 2
g2 <- plot_age(m2, 2)
# model 3
g3 <- plot_age(m3, 3)
# model 4
g4 <- plot_age(m4, 4)
# model 5
g5 <- plot_age(m5, 5)
# model 6
g6 <- plot_age(m6, 6)
grid.arrange(g1, g2, g3, g4, g5, g6)
## model averaged predictions
howell_ensemble <- ensemble(m1, m2, m3, m4, m5, m6, refresh = 0)
# find the model with lowest WAIC
compare(m1, m2, m3, m4, m5, m6)
# compare the predictions by 2 models
m4.mu <- link(m4, refresh = 0, data = d) # use the raw data for the prediction of m4
m4.preds <- cbind(
age = d$age,
mu = apply(m4.mu, 2, mean),
mu.lo = apply(m4.mu, 2, PI)[1,],
mu.hi = apply(m4.mu, 2, PI)[2,]
) %>%
unique()
ensemble.preds <- cbind(
age = d$age,
mu = apply(howell_ensemble$link, 2, mean),
mu.lo = apply(howell_ensemble$link, 2, PI)[1,],
mu.hi = apply(howell_ensemble$link, 2, PI)[2,]
) %>%
unique()
ggplot(data = data.frame(m4.preds)) +
geom_point(data = d, aes(x = age, y = height), alpha = 0.6) +
geom_line(aes(x = age, y = mu, linetype = "m4")) +
geom_line(aes(x = age, y = mu.lo, linetype = "m4")) +
geom_line(aes(x = age, y = mu.hi, linetype = "m4")) +
geom_line(data = data.frame(ensemble.preds), aes(x = age, y = mu, linetype = "ensemble")) +
geom_ribbon(data = data.frame(ensemble.preds), aes(x = age, ymin = mu.lo, ymax = mu.hi), alpha = 0.2) +
# scale_linetype_discrete("Model", labels = c("M4", "Ensemble")) +
labs(y = "height", x = "age")
## model averaged predictions
howell_ensemble <- ensemble(m1, m2, m3, m4, m5, m6, refresh = 0)
# find the model with lowest WAIC
compare(m1, m2, m3, m4, m5, m6)
# compare the predictions by 2 models
m4.mu <- link(m4, refresh = 0, data = d) # use the raw data for the prediction of m4
m4.preds <- cbind(
age = d$age,
mu = apply(m4.mu, 2, mean),
mu.lo = apply(m4.mu, 2, PI)[1,],
mu.hi = apply(m4.mu, 2, PI)[2,]
) %>%
unique()
ensemble.preds <- cbind(
age = d$age,
mu = apply(howell_ensemble$link, 2, mean),
mu.lo = apply(howell_ensemble$link, 2, PI)[1,],
mu.hi = apply(howell_ensemble$link, 2, PI)[2,]
) %>%
unique()
ggplot(data = data.frame(m4.preds)) +
geom_point(data = d, aes(x = age, y = height), alpha = 0.6) +
geom_line(aes(x = age, y = mu, linetype = "m4")) +
geom_line(aes(x = age, y = mu.lo, linetype = "m4")) +
geom_line(aes(x = age, y = mu.hi, linetype = "m4")) +
geom_line(data = data.frame(ensemble.preds), aes(x = age, y = mu, linetype = "ensemble")) +
geom_ribbon(data = data.frame(ensemble.preds), aes(x = age, ymin = mu.lo, ymax = mu.hi), alpha = 0.2) +
# scale_linetype_discrete("Model", labels = c("M4", "Ensemble")) +
labs(y = "height", x = "age")
## model averaged predictions
howell_ensemble <- ensemble(m1, m2, m3, m4, m5, m6, refresh = 0)
# find the model with lowest WAIC
compare(m1, m2, m3, m4, m5, m6)
# compare the predictions by 2 models
m4.mu <- link(m4, refresh = 0) # use the raw data for the prediction of m4
m4.preds <- cbind(
age = d1$age,
mu = apply(m4.mu, 2, mean),
mu.lo = apply(m4.mu, 2, PI)[1,],
mu.hi = apply(m4.mu, 2, PI)[2,]
) %>%
unique()
ensemble.preds <- cbind(
age = d1$age,
mu = apply(howell_ensemble$link, 2, mean),
mu.lo = apply(howell_ensemble$link, 2, PI)[1,],
mu.hi = apply(howell_ensemble$link, 2, PI)[2,]
) %>%
unique()
ggplot(data = data.frame(m4.preds)) +
geom_point(data = d1, aes(x = age, y = height), alpha = 0.6) +
geom_line(aes(x = age, y = mu, linetype = "m4")) +
geom_line(aes(x = age, y = mu.lo, linetype = "m4")) +
geom_line(aes(x = age, y = mu.hi, linetype = "m4")) +
geom_line(data = data.frame(ensemble.preds), aes(x = age, y = mu, linetype = "ensemble")) +
geom_ribbon(data = data.frame(ensemble.preds), aes(x = age, ymin = mu.lo, ymax = mu.hi), alpha = 0.2) +
# scale_linetype_discrete("Model", labels = c("M4", "Ensemble")) +
labs(y = "height", x = "age")
# plot the model-averaged predictions
m7.3.2.preds <- cbind(
rugged = d$rugged,
mu.PIlo=apply(link2,2,PI)[1,],
mu.PIhi=apply(link2,2,PI)[2,],
mu.mean = apply(link2, 2, mean)
)
ensemble.preds <- cbind(
rugged = d$rugged,
mu = apply(rugged.ensemble$link, 2, mean),
mu.lo = apply(rugged.ensemble$link, 2, PI)[1,],
mu.hi = apply(rugged.ensemble$link, 2, PI)[2,]
) %>%
unique()
ggplot(data = data.frame(m7.3.2.preds)) +
geom_point(data = rugged_w_sey, aes(x = rugged, y = log_gdp), alpha = 0.6) +
geom_line(aes(x = rugged, y = mu.mean, linetype = "model without Seychelles")) +
geom_ribbon(data = data.frame(m4.preds), aes(x = age, ymin = mu.PIlo, ymax = mu.PIhi), alpha = 0.2) +
geom_line(data = data.frame(ensemble.preds), aes(x = rugged, y = mu, linetype = "ensemble")) +
geom_ribbon(data = data.frame(ensemble.preds), aes(x = rugged, ymin = mu.lo, ymax = mu.hi), alpha = 0.2)
# scale_linetype_discrete("Model", labels = c("Model from (b)", "Ensemble")) +
# labs(y = "height", x = "age")
m7.3.2.preds <- cbind(
rugged = d$rugged,
mu.PIlo=apply(link2,2,PI)[1,],
mu.PIhi=apply(link2,2,PI)[2,],
mu.mean = apply(link2, 2, mean)
)
library(dlnorm)
help(dlnorm)
dlnorm(0)
dlnorm(23)
library(readr)
meta_ <- read_csv("~/Desktop/meta..csv")
View(meta_)
bd_meta <- meta_
bd_meta
bd_meta$BDII/NOS
bd_meta %>% rename(BDII_or_NOS = `BDII/NOS`)
bd_meta <- bd_meta %>% rename(BDII_or_NOS = `BDII/NOS`) %>% rename(cut.off = `Cut-off`) %>% rename(methods = Methods) %>% rename(study = Study)
bd_meta
save(bd_meta, "/Users/James/Desktop/BayesSenMC/data/bd_meta.RData")
save(bd_meta, "/Users/James/Desktop/BayesSenMC/data/bd_meta.RData")
save(bd_meta, file = "/Users/James/Desktop/BayesSenMC/data/bd_meta.RData")
library(readr)
smoke_meta <- read_csv("~/Desktop/smoke_meta.csv")
View(smoke_meta)
smoke_meta %>% mutate(n11 = N1*Se/100, n00 = N0*Sp/100) %>% mutate(n10 = N0 - n00, n01 = N1 - n11)
smoke_meta %>% mutate(n11 = N1*Se/100, n00 = N0*Sp/100) %>% mutate(n10 = N0 - n00, n01 = N1 - n11) %>% select(-N1, Se, Sp, N0)
smoke_meta %>% mutate(n11 = N1*Se/100, n00 = N0*Sp/100) %>% mutate(n10 = N0 - n00, n01 = N1 - n11) %>% select(-N1, -Se, -Sp, -N0)
View(smoke_meta %>% mutate(n11 = round(N1*Se/100), round(n00 = N0*Sp/100)) %>% mutate(n10 = N0 - n00, n01 = N1 - n11) %>% select(-N1, -Se, -Sp, -N0))
View(smoke_meta %>% mutate(n11 = round(N1*Se/100), n00 = round(N0*Sp/100)) %>% mutate(n10 = N0 - n00, n01 = N1 - n11) %>% select(-N1, -Se, -Sp, -N0))
smoke_meta <- smoke_meta %>% mutate(n11 = round(N1*Se/100), n00 = round(N0*Sp/100)) %>% mutate(n10 = N0 - n00, n01 = N1 - n11) %>% select(-N1, -Se, -Sp, -N0)
save(smoke_meta, "/Users/James/Desktop/BayesSenMC/data/smoke_meta.RData")
save(smoke_meta, file = "/Users/James/Desktop/BayesSenMC/data/smoke_meta.RData")
data(BayesSenMC::bd_meta)
library(BayesSenMC)
data(BayesSenMC::bd_meta)
??stan
help(stan)
rep(list(1))
rep(list(1), 3)
help("map")
help(dnorm)
dnorm(x = 2, x = 3)
help(stan)
library(orsk)
vignette(orsk)
vignette('orsk')
vignette("orsk_demo", package = "orsk")
edit(vignette("orsk_demo", package = "orsk"))
library(roxygen2)
library(devtools)
getwd()
setwd("Desktop/BayesSenMC")
document()
remove.packages("BayesSenMC")
document()
