1 + 1
print("putu")
getwd()
setwd("./Desktop/BayesSenMC")
document()
library(devtools)
library(roxygen2)
document()
setwd("..")
library("BayesSenMC")
install("BayesSenMC")
library("BayesSenMC")
# Model with no misclassification
m.1 <- correctedOR(a = 66, N1 = 11782, c = 243, N0 = 57973, chains = 3,
iter = 10000)
# Model with constant misclassification
m.2 <- crudeOR(a = 66, N1 = 11782, c = 243, N0 = 57973, se = 0.744, sp = 0.755,
chains = 3, iter = 10000)
# Model with logit bivariate transformed misclassification
m.3 <- logitOR(a = 66, N1 = 11782, c = 243, N0 = 57973, m.lg.se = 1.069,
m.lg.sp = 1.126, s.lg.se = 0.893, s.lg.sp = 0.712, chains = 3, iter = 10000)
# Model with logit transformed misclassification w/ fixed correlation
m.4 <- fixedCorrOR(a = 66, N1 = 11782, c = 243, N0 = 57973, m.lg.se = 1.069,
m.lg.sp = 1.126, s.lg.se = 0.893, s.lg.sp = 0.712, rho = -0.379, chains = 3,
iter = 10000)
# Model with logit bivariate transformed misclassification
# plus Fisher Z transformed correlation
m.5 <- randCorrOR(a = 66, N1 = 11782, c = 243, N0 = 57973, m.lg.se = 1.069,
m.lg.sp = 1.126, s.lg.se = 0.893, s.lg.sp = 0.712, m.z = -0.399, s.z = 0.139,
chains = 3, iter = 10000, traceplot = TRUE)
g1 <- OR_hist(m.1, a = 66, N1 = 11782, c = 243, N0 = 57973, se = 0.744,
sp = 0.755, x.max = 3, y.max = 5, binwidth = 0.1) + ggtitle("(a)")
library(ggplot2)
g1 <- OR_hist(m.1, a = 66, N1 = 11782, c = 243, N0 = 57973, se = 0.744,
sp = 0.755, x.max = 3, y.max = 5, binwidth = 0.1) + ggtitle("(a)")
log(1.1)
exp(0.095)
((66 + (0.755 - 1) * 11782) * (0.744 * 57973 - 243))/((243 + (0.755 - 1) * 57973) * (0.744 * 11782 - 66))
((66 + (1 - 1) * 11782) * (1 * 57973 - 243))/((243 + (1 - 1) * 57973) * (1 * 11782 - 66))
log(1.33832)
log(0.996)
dlnorm()
help(stan_hist)
stan_hist(m.1, pars = "ORadj")
library(rstan)
stan_hist(m.1, pars = "ORadj")
traceplot(m.1, pars = "LOR_c")
summary(m.1, probs = c(1))
summary(m.1
)
summary(m.1, probs = c(1))
summary(m.1, probs = c(1))$aummary
summary(m.1, probs = c(1))$summary
summary(m.1, probs = c(1))$summary[['LOR_c']]
summary(m.1, probs = c(1))$summary['LOR_c']
summary(m.1, probs = c(1))$summary[,'LOR_c']
summary(m.1, probs = c(1))$summary
class(summary(m.1, probs = c(1))$summary)
summary(m.1, probs = c(1))$summary['LOR_c']
summary(m.1, probs = c(1))$summary[,'LOR_c']
summary(m.1, probs = c(1))$summary['LOR_c',]
summary(m.1, probs = c(1))$summary['LOR_c','100%']
getwd()
setwd(
"BayesSenMC"
)
document()
document()
setwd("..")
install("BayesSenMC")
library(BayesSenMC)
# Model with no misclassification
m.1 <- correctedOR(a = 66, N1 = 11782, c = 243, N0 = 57973, chains = 3,
iter = 10000)
# Model with constant misclassification
m.2 <- crudeOR(a = 66, N1 = 11782, c = 243, N0 = 57973, se = 0.744, sp = 0.755,
chains = 3, iter = 10000)
# Model with logit bivariate transformed misclassification
m.3 <- logitOR(a = 66, N1 = 11782, c = 243, N0 = 57973, m.lg.se = 1.069,
m.lg.sp = 1.126, s.lg.se = 0.893, s.lg.sp = 0.712, chains = 3, iter = 10000)
# Model with logit transformed misclassification w/ fixed correlation
m.4 <- fixedCorrOR(a = 66, N1 = 11782, c = 243, N0 = 57973, m.lg.se = 1.069,
m.lg.sp = 1.126, s.lg.se = 0.893, s.lg.sp = 0.712, rho = -0.379, chains = 3,
iter = 10000)
# Model with logit bivariate transformed misclassification
# plus Fisher Z transformed correlation
m.5 <- randCorrOR(a = 66, N1 = 11782, c = 243, N0 = 57973, m.lg.se = 1.069,
m.lg.sp = 1.126, s.lg.se = 0.893, s.lg.sp = 0.712, m.z = -0.399, s.z = 0.139,
chains = 3, iter = 10000, traceplot = TRUE)
g1 <- OR_hist(m.1, a = 66, N1 = 11782, c = 243, N0 = 57973, se = 0.744,
sp = 0.755, x.max = 3, y.max = 5, binwidth = 0.1) + ggtitle("(a)")
g2 <- OR_hist(m.2, a = 66, N1 = 11782, c = 243, N0 = 57973, se = 0.744,
sp = 0.755, x.max = 3, y.max = 5, binwidth = 0.1) + ggtitle("(b)")
data(bd_meta)
bd_meta
bd_meta <- bd_meta %>% mutate(group = seq(1, nrow(bd_meta)))
library(dplyr)
bd_meta <- bd_meta %>% mutate(group = seq(1, nrow(bd_meta)))
bd_meta
bd_meta <- bd_meta %>% mutate(group = rep(1, nrow(bd_meta)))
bd_meta
bd_meta[nrow(bd_meta) + 1,] = list(23, 123, 24, 124, 10, 9, 8, 0)
bd_meta
View(bd_meta)
bd_meta[nrow(bd_meta) + 1,] = list("pau", 23, 123, 24, 124, 10, 9, 8, 0)
View(bd_meta)
bd_meta[nrow(bd_meta), ] = list("mau", 23, 123, 24, 124, 10, 9, 8, 0)
View(bd_meta)
dat <- bd_meta %>% mutate(N1 = n11 + n10,
N0 = n01 + n00) %>%
rename(a = n11, b = n00) %>%
select(a, b, N1, N0, group)
sid <- seq(1, nrow(dat))
dat_final <- merge(
dat %>% mutate(sid, Y = a, N = N1, Se = 1) %>% select(sid, Y, N, Se, group),
dat %>% mutate(sid, Y = b, N = N0, Se = 0) %>% select(sid, Y, N, Se, group), all = TRUE
)
dat_final <- cbind(dat_final, as.numeric(dat_final$Se==0))
dat_final <- cbind(dat_final, 1 - as.numeric(dat_final$Se==0))
names(dat_final)[c(6, 7)] <- c("is_sp","is_se")
dat_final <- cbind(dat_final, as.numeric(dat_final$group==0))
dat_final <- cbind(dat_final, 1 - as.numeric(dat_final$group==0))
names(dat_final)[c(8, 9)] <- c(paste0("is_not_", group), paste0("is_", group))
names(dat_final)[c(8, 9)] <- c("is_not_group", "is_group")
user_logis <- function(a, b) {
linkfun <- function(mu) log((mu - a) / (a + b - mu))
linkinv <- function(eta) a + b / (exp(-1*eta) + 1)
mu.eta <- function(eta) b * exp(-1*eta) / (exp(-1*eta) + 1)**2
valideta <- function(eta) TRUE
link <- paste0("logit(", a, ", ", b, ")")
structure(list(linkfun = linkfun, linkinv = linkinv,
mu.eta = mu.eta, valideta = valideta, name = link),
class = "link-glm")
}
mod <- glmer(cbind(Y, N-Y) ~ ((0 + is_se + is_sp) | sid:group) + (group | sid),
data = dat_final, family = binomial(link = user_logis(0, 1)))
library(lme4)
mod <- glmer(cbind(Y, N-Y) ~ ((0 + is_se + is_sp) | sid:group) + (group | sid),
data = dat_final, family = binomial(link = user_logis(0, 1)))
mod
mod <- glmer(cbind(Y, N-Y) ~ ((0 + is_se + is_sp) | sid:group) + (group | sid) + group + se,
data = dat_final, family = binomial(link = user_logis(0, 1)))
mod <- glmer(cbind(Y, N-Y) ~ ((0 + is_se + is_sp) | sid:group) + (group | sid) + group + Se,
data = dat_final, family = binomial(link = user_logis(0, 1)))
mod
mod <- glmer(cbind(Y, N-Y) ~ ((0 + is_se + is_sp) | sid) + ((0 + is_se + is_group) | sid) + ((0 + is_sp + is_group) | sid) + ((0 + is_not_group + is_sp) | sid) + ((0 + is_se + is_not_group) | sid) + ((0 + is_group + is_not_group) | sid) + Se + group,
data = dat_final, family = binomial(link = user_logis(0, 1)))
mod
mod <- glmer(cbind(Y, N-Y) ~ ((0 + is_group + is_not_group) | Se:sid) + ((0 + is_se + is_sp) | sid) + Se + group,
data = dat_final, family = binomial(link = user_logis(0, 1)))
mod <- glmer(cbind(Y, N-Y) ~ ((0 + is_group + is_not_group) | sid) + ((0 + is_se + is_sp) | sid) + Se + group,
data = dat_final, family = binomial(link = user_logis(0, 1)))
mod
mod <- glmer(cbind(Y, N-Y) ~ ((0 + is_group + is_not_group) | is_se:sid) + ((0 + is_group + is_not_group) | is_sp:sid) + ((0 + is_se + is_sp) | sid) + Se + group,
data = dat_final, family = binomial(link = user_logis(0, 1)))
attr(mod)
a <- 2
class(a)
class(a) <- c("numeric", "pau")
class(a)
a + 3
is.numeric(a)
class(mod)
class(mod) <- c("glmerMod", "pauMod")
summary(mod)
class(mod) <- "glmerMod"
summary(mod)
mod
mod <- glmer(cbind(Y, N-Y) ~ ((0 + is_group + is_not_group) | sid) + ((0 + is_se + is_sp) | sid) + Se + group,
data = dat_final, family = binomial(link = user_logis(0, 1)))
summary(mod)
help(glmer)
attr(mod)
attributes(mod)
attributes(mod)$type
attributes(mod)$type <- "nondiff"
attributes(mod)$type
attr(mod, "type")
summary(mod)
summary(mod)$coefficients
summary(mod)$coefficients[1,1]
summary(mod)$coefficients['Se',1]
summary(mod)$coefficients['group',1]
summary(mod)$varcor
s <- summary(mod)
s$varcor$sid[2, 2]
s$varcor$sid
s$varcor$sid[4]
s$varcor$sid[8]
s$varcor$sid[7]
s$varcor$sid[3]
s$varcor$sid[3] / (s$varcor$sid[1] * s$varcor$sid[2])
s$varcor$sid[3] * (s$varcor$sid[1] * s$varcor$sid[2])
s$varcor$sid[3] / sqrt(s$varcor$sid[1] * s$varcor$sid[2])
s$varcor$sid[1] * s$varcor$sid[2]
sqrt(4)
s$varcor$sid[3] / sqrt(s$varcor$sid[1] * s$varcor$sid[2])
sqrt(s$varcor$sid[1] * s$varcor$sid[2])
sqrt(s$varcor$sid[1] * s$varcor$sid[4])
s$varcor$sid[3] / sqrt(s$varcor$sid[1] * s$varcor$sid[4])
s$varcor$sid1
s$varcor$sid.1
mod <- nlme_nondiff(bd_meta, lower = 0)
paramEst(mod)
paramEst(mod, lower = 0)
install.packages("orsk")
vignette("orsk_demo", package = "orsk")
edit(vignette("orsk_demo", package = "orsk"))
vignette("orsk_demo", package = "orsk")
vignette("orsk_demo", package = "orsk")
getwd()
setwd("BayesSenMC")
document()
setwd("..")
install("BayesSenMC")
library(BayesSenMC)
nonDiffOR(a = 66, N1 = 11782, c = 243, N0 = 57973, , mu = c(1.069, 1.069, 1.126, 1.126), s.lg.se0 = 0.893, s.lg.se1 = 0.893, s.lg.sp0 = 0.712, s.lg.sp1 = 0.712, corr.sesp = -0.377, corr.group = 0, traceplot = TRUE)
setwd("BayesSenMC")
document()
setwd("..")
install("BayesSenMC")
library(BayesSenMC)
nonDiffOR(a = 66, N1 = 11782, c = 243, N0 = 57973, , mu = c(1.069, 1.069, 1.126, 1.126), s.lg.se0 = 0.893, s.lg.se1 = 0.893, s.lg.sp0 = 0.712, s.lg.sp1 = 0.712, corr.sesp = -0.377, corr.group = 0, traceplot = TRUE)
mod <- nlme_diff(bd_meta, lower = 0)
print(paste0("The lower bound used in this model is", a))
print(paste("The lower bound used in this model is", a))
setwd("BayesSenMC")
document()
setwd("..")
install("BayesSenMC")
library(BayesSenMC)
mod <- nlme_diff(bd_meta, lower = 0)
mod <- nlme_nondiff(bd_meta, lower = 0)
mod <- nlme_nondiff(bd_meta, lower = 0.5)
mod
mod$love
attributes(mod)$love
attributes(mod)$love == NULL
attributes(mod)$love == FALSE
attributes(mod)$love == FALSE + 0
attributes(mod)$love == FALSE + 1
attributes(mod)$love == NULL
is.null(attributes(mod)$love)
is.null(attributes(mod)$love) or TRUE
is.null(attributes(mod)$love) || TRUE
setwd("BayesSenMC")
document()
setwd("..")
install("BayesSenMC")
library(BayesSenMC)
mod <- nlme_nondiff(bd_meta, lower = 0.5)
paramEst(mod)
View(bd_meta)
mod <- nlme_diff(bd_meta, lower = 0.5)
paramEst(mod)
summary(mod)
summary(mod)[1,1]
summary(mod)['Se',1]
summary(mod)$coefficients['Se',1]
setwd("BayesSenMC")
document()
setwd("..")
install("BayesSenMC")
library(BayesSenMC)
mod <- nlme_diff(bd_meta, lower = 0.5)
paramEst(mod)
inv.logit(1.1369)
exp(1.1369) / (1 + exp(1.1369))
setwd("BayesSenMC")
document()
setwd("..")
install("BayesSenMC")
library(BayesSenMC)
check()
setwd("BayesSenMC")
check()
document()
setwd("..")
install("BayesSenMC")
library(BayesSenMC)
setwd("BayesSenMC")
check()
View(bd_meta)
bd_meta <- bd_meta %>% mutate(group = ifelse(methods == "BSDS", 1, 0))
bd_meta
document()
setwd("..")
install("BayesSenMC")
library("BayesSenMC")
setwd("BayesSenMC")
check()
check() --as-cran
edit(vignette("orsk_demo", package = "orsk"))
install.packages(c("knitr", "xtable"))
